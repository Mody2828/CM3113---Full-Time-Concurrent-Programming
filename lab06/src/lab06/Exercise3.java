package lab06;


import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

/**
 * @author David
 */
public class Exercise3 extends Application {
    // keep references to all event sources

    private TextField theTime, theDuration;
    private TextArea text;
    
    private Button button1, button2, button3, button4;
    private java.util.TimerTask theClockTask;
    private java.util.Timer theClockTimer;

    LocalTime startTime;

    // declare references to application specific objects here ...
     public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage stage) {
        /* initialise GUI components here */
        initComponents(stage);
        setupClock();
        setupStopwatch();
    }

    private void setupClock() {
        // construct a TimerTask and Timer to generate actionEvents every 1000 milliseconds

    }

    private void setupStopwatch() {

    }

    private String getElapsedTime(){
        long elapsedTimeMillis = Duration.between(startTime, LocalTime.now()).toMillis();
        int seconds = (int) (elapsedTimeMillis / 1000) % 60;
        int minutes = (int) ((elapsedTimeMillis / (1000 * 60)) % 60);
        int hours = (int) ((elapsedTimeMillis / (1000 * 60 * 60)) % 24);
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    private String getTime(){
        LocalDateTime todaysDate = LocalDateTime.now();
        // format the date and time and set to theTime textBox
        return todaysDate.format(DateTimeFormatter.ofPattern("EEE, dd-MMM-yyyy HH:mm:ss"));
    }


    private void startAction() {
        // add code here to set the stopwatch running
        button1.setDisable(true);
        button2.setDisable(false);
    }

    private void stopAction() {
        // add code here to pause the stopwatch 
        button1.setDisable(false);
        button2.setDisable(true);
    }

    private void resetAction() {
        // add code here to reset the stopwatch
        button1.setDisable(false);
        button2.setDisable(true);
        startTime = LocalTime.now();
        String formattedDuration = String.format("%02d:%02d:%02d", 0, 0, 0);
        theDuration.setText(formattedDuration);
    }

    private void taskAction() {
        // add code here to run a Work runnable in a thread
    }

    public void initComponents(Stage stage) {
        GridPane root = new GridPane();
        GridPane panel = new GridPane();
        Scene scene = new Scene(root, 600, 400);
        root.add(panel, 0, 1);

        // remember time at which application has started
        startTime = LocalTime.now();

        // create a Panel to group together theTime, theDuration

        // create a Text Field and locate in panel at centre of the frame
        theTime = new TextField(""); // (initialText, width(pixels))
        panel.add(theTime, 0, 1);
        // make sure user cannot edit this field i.e. this field is for output only
        theTime.setEditable(false);

        // create a Text Field and locate in panel at centre of the frame
        theDuration = new TextField(""); // (initialText, width(pixels))
        panel.add(theDuration,0, 2);
        // make sure user cannot edit this field i.e. this field is for output only
        theDuration.setEditable(false);

        this.text = new TextArea("");
        panel.add(text,0,3);

        GridPane bPanel = new GridPane();
        button1 = new Button("Start");
        bPanel.add(button1,0,0);
        button2 = new Button("Stop");
        bPanel.add(button2,1,0);
        button2.setDisable(true);
        button3 = new Button("Reset");
        bPanel.add(button3,2,0);
        button4 = new Button("Run Task");
        bPanel.add(button4,3,0);

        panel.add(bPanel,0,4);

        // register listeners for action events generated by each button
        button1.setOnAction(e -> { startAction();});
        button2.setOnAction(e -> { stopAction();});
        button3.setOnAction(e -> { resetAction();});
        button4.setOnAction(e -> { taskAction();});

        /* add "scene" to "stage" and make visible*/
        stage.setTitle("CM3113 Lab 06 - Exercise 3");
        stage.setScene(scene);
        stage.show();
    }

}
